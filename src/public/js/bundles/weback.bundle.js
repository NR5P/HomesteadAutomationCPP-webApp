/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/public/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/public/js/cycle-irrigation-device.js":
/*!**************************************************!*\
  !*** ./src/public/js/cycle-irrigation-device.js ***!
  \**************************************************/
/*! exports provided: CycleIrrigationDevice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CycleIrrigationDevice\", function() { return CycleIrrigationDevice; });\n/* harmony import */ var _device_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./device.js */ \"./src/public/js/device.js\");\n\n\n/**********************************************************************\n * for timed irrigation control\n *********************************************************************/\nclass CycleIrrigationDevice extends _device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"]{\n    constructor(id, name, pin, notes, state, cycleOnTimeHr, cycleOnTimeMin, cycleOnTimeSec, cycleOffTimeHr,\n        cycleOffTimeMin, cycleOffTimeSec, blackoutStartTime, blackoutStopTime) {\n\n        super(id, name, pin, notes, state);\n\n        this.cycleOnTimeHr = cycleOnTimeHr;\n        this.cycleOnTimeMin = cycleOnTimeMin;\n        this.cycleOnTimeSec = cycleOnTimeSec;\n        this.cycleOffTimeHr = cycleOffTimeHr;\n        this.cycleOffTimeMin = cycleOffTimeMin;\n        this.cycleOffTimeSec = cycleOffTimeSec;\n        this.blackoutStartTime = blackoutStartTime;\n        this.blackoutStopTime = blackoutStopTime;\n        this.btnColor = \"#5757f2\";\n        this.class = \"cycle-irrigation-device-btn\";\n            \n        this.renderBtn();\n    }\n\n    /**********************************************************************\n     * render settings under button on main page to allow adjustment of \n     * the device\n     *********************************************************************/\n    renderDeviceSettings(event) {\n        //console.log(event.target);\n        //event.target.innerHTML = \"something\";\n        //console.log(this.name); // does not know the name here\n        //this.name = \"something\";\n        //console.log(this.name); // does not know the name here\n        //event.target.innerHTML = \"something\";\n        //console.log(Device.deviceList);\n        let formElement = document.createElement(\"form\");\n        let options = \"\";\n        for (let i = 1; i < 11; i += 1) {\n            if (_device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"].pinsUsed.includes(i)) {\n                if (i != this.pin)\n                    options += `<option disabled>${i}</option>`\n            } else {\n                options += `<option>${i}</option>`\n            }\n        }\n\n        let form = `\n            <form class=\"deviceForm\"> \n                <label for=\"name\">Name: </label>           \n                <input type=\"text\" id=\"name\" name=\"name\" value=\"${this.name}\">\n\n                <label for=\"pin\">Pin: </label>           \n                <select name=\"pin\" id=\"pin\">\n                    <option>${this.pin}<option>\n                    ${options}\n                </select>\n\n\n                <label for=\"notes\">Notes: </label>           \n                <input type=\"textarea\" id=\"notes\" name=\"notes\" value=\"${this.notes}\">\n\n                <div class=\"hr-min-sec-time\">\n                    <label for=\"cycleOnTimeHr\">Cycle On Time Hr:Min:Sec </label>\n                    <input type=\"number\" id=\"cycleOnTimeHr\" class\"cycleOnTimeHr\" name=\"cycleOnTimeHr\" step=\"1\" value=\"${this.cycleOnTimeHr}\">\n                    <span class=\"colon\">:</span>   \n                    <input type=\"number\" id=\"cycleOnTimeMin\" class=\"cycleOnTimeMin\" name=\"cycleOnTimeMin\" step=\"1\" value=\"${this.cycleOnTimeMin}\">\n                    <span class=\"colon\">:</span>   \n                    <input type=\"number\" id=\"cycleOnTimeSec\" class=\"cycleOnTimeSec\" name=\"cycleOnTimeSec\" step=\"1\" value=\"${this.cycleOnTimeSec}\">\n                </div>\n\n                <div class=\"hr-min-sec-time\">\n                    <label for=\"cycleOffTimeHr\">Cycle Off Time Hr:Min:Sec </label>\n                    <input type=\"number\" id=\"cycleOffTimeHr\" class=\"cycleOffTimeHr\" name=\"cycleOffTimeHr\" step=\"1\" value=\"${this.cycleOffTimeHr}\">\n                    <span class=\"colon\">:</span>   \n                    <input type=\"number\" id=\"cycleOffTimeMin\" class=\"cycleOffTimeMin\" name=\"cycleOffTimeMin\" step=\"1\" value=\"${this.cycleOffTimeMin}\">\n                    <span class=\"colon\">:</span>   \n                    <input type=\"number\" id=\"cycleOffTimeSec\" class=\"cycleOffTimeSec\" name=\"cycleOffTimeSec\" step=\"1\" value=\"${this.cycleOffTimeSec}\">\n                </div>\n\n\n                <label for=\"blackoutStartTime\">Blackout Start Time</label>\n                <input type=\"time\" id=\"blackoutStartTime\" name=\"blackoutStartTime\" value=\"${this.blackoutStartTime}\">\n\n                <label for=\"blackoutStopTime\">Blackout Stop Time</label>\n                <input type=\"time\" id=\"blackoutStopTime\" name=\"blackoutStopTime\" value=\"${this.blackoutStopTime}\">\n\n                <button type=\"button\" id=\"form-submit\" class=\"form-submit\">Modify</button>\n                <button type=\"button\" class=\"form-delete\">Delete</button>\n                <button type=\"button\" class=\"form-cancel\" onclick = \"window.location.href = '/';\">Cancel</button>\n            </form>\n        `;\n        formElement.innerHTML = form;\n        \n        if (event.target.nextSibling == null || event.target.nextSibling.tagName != \"FORM\") {\n            event.target.insertAdjacentElement(\"afterend\", formElement);\n        } else {\n            event.target.parentNode.removeChild(event.target.nextSibling);\n        }\n        document.getElementById(\"form-submit\").addEventListener(\"click\", () => {\n            let data = {\n                id : _device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"].pinsConvertForPi(this.id),\n                name : document.getElementById(\"name\").value,\n                pin : document.getElementById(\"pin\").value,\n                notes : document.getElementById(\"notes\").value,\n                cycleOnTimeHr : document.getElementById(\"cycleOnTimeHr\").value,\n                cycleOnTimeMin : document.getElementById(\"cycleOnTimeMin\").value,\n                cycleOnTimeSec : document.getElementById(\"cycleOnTimeSec\").value,\n                cycleOffTimeHr : document.getElementById(\"cycleOffTimeHr\").value,\n                cycleOffTimeMin : document.getElementById(\"cycleOffTimeMin\").value,\n                cycleOffTimeSec : document.getElementById(\"cycleOffTimeSec\").value,\n                blackoutStartTime : document.getElementById(\"blackoutStartTime\").value,\n                blackoutStopTime : document.getElementById(\"blackoutStopTime\").value\n            }\n            console.log(data.id);\n            fetch(\"/cycleIrrigation\", {\n                method : \"PUT\",\n                headers : {\n                    'Content-Type' : 'application/json'\n                },\n                body : JSON.stringify(data)\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200)\n                    console.log(\"success\");\n                    //TODO:\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        })\n    }\n};\n\n//# sourceURL=webpack:///./src/public/js/cycle-irrigation-device.js?");

/***/ }),

/***/ "./src/public/js/device.js":
/*!*********************************!*\
  !*** ./src/public/js/device.js ***!
  \*********************************/
/*! exports provided: Device */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Device\", function() { return Device; });\nclass Device {\n\n    constructor(id, name, pin, notes, state) {\n        this.id = id;\n        this.name = name;\n        this.pin = Device.pinsConvertForView[pin];\n        this.notes = notes;\n        this.state = state;\n        Device.pinsUsed.push(this.pin);\n    }\n\n    /**********************************************************************\n     * add button to list of buttons that are being displayed \n     *********************************************************************/\n    renderBtn() {\n        if (document.getElementById(\"main-area\") !== null) {\n            let btnElement = document.createElement(\"button\");\n            let iconElement = document.createElement(\"img\");\n            iconElement.setAttribute(\"src\",`imgs/icons/${this.state}.png`)\n            iconElement.setAttribute(\"class\",\"on-indicator\");\n            let btnTxt = document.createTextNode(this.name);\n            btnElement.appendChild(iconElement);\n            btnElement.appendChild(btnTxt);\n            btnElement.setAttribute(\"style\", `background-color: ${this.btnColor}`);\n            btnElement.setAttribute(\"class\", `${this.class}`)\n\n            btnElement.addEventListener(\"click\", (event) => {\n                this.renderDeviceSettings(event);\n            });\n\n            document.getElementById(\"main-area\").appendChild(btnElement);\n        }\n    }\n};\nDevice.pinsUsed = [];\nDevice.pinsConvertForView = {\n    2 : 1,\n    3 : 2,\n    4 : 3,\n    17 : 4,\n    27 : 5,\n    22 : 6,\n    10 : 7,\n    9 : 8,\n    11 : 9,\n    5 : 10\n}\n\nDevice.pinsConvertForPi = {\n    1 : 2,\n    2 : 3,\n    3 : 4,\n    4 : 17,\n    5 : 27,\n    6 : 22,\n    7 : 10,\n    8 : 9,\n    9 : 11,\n    10 : 5\n}\n\n\n//# sourceURL=webpack:///./src/public/js/device.js?");

/***/ }),

/***/ "./src/public/js/irrigation-device.js":
/*!********************************************!*\
  !*** ./src/public/js/irrigation-device.js ***!
  \********************************************/
/*! exports provided: IrrigationDevice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IrrigationDevice\", function() { return IrrigationDevice; });\n/* harmony import */ var _device_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./device.js */ \"./src/public/js/device.js\");\n\n\n/**********************************************************************\n * for timed irrigation control\n *********************************************************************/\nclass IrrigationDevice extends _device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"]{\n    constructor(id, name, pin, notes, state, cycleOnTimeArray, startTimesArray, daysToIrrigate) {\n        super(id, name, pin, notes, state);\n\n        this.cycleOnTimeArray = cycleOnTimeArray || [];\n        this.startTimesArray = startTimesArray || [];\n        this.daysToIrrigate = daysToIrrigate;\n        this.btnColor = \"#0394fc\";\n        this.class = \"irrigation-device-btn\";\n            \n        this.renderBtn();\n    }\n\n    /**********************************************************************\n     * render settings under button on main page to allow adjustment of \n     * the device\n     *********************************************************************/\n    renderDeviceSettings(event) {\n        let formElement = document.createElement(\"form\");\n        formElement.id = \"deviceForm\";\n        formElement.action = \"/irrigation\";\n        formElement.method = \"POST\";\n\n        const weekdays = [\"monday\", \"tuesday\", \"wendesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\n        let options = \"\";\n        for (let i = 1; i < 11; i += 1) {\n            if (_device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"].pinsUsed.includes(i)) {\n                if (i != this.pin)\n                    options += `<option disabled>${i}</option>`\n            } else {\n                options += `<option>${i}</option>`\n            }\n        }\n        let form = `\n                <label for=\"name\">Name: </label>           \n                <input type=\"text\" id=\"name\" name=\"name\" value=\"${this.name}\">\n\n                <label for=\"pin\">Pin: </label>           \n                <select name=\"pin\" id=\"pin\">\n                    <option>${this.pin}<option>\n                    ${options}\n                </select>\n\n                <label for=\"notes\">Notes: </label>           \n                <input type=\"textarea\" id=\"notes\" name=\"notes\" value=\"${this.notes}\">\n\n                <div class=\"daysToIrrigate\">\n                    ${\n                        weekdays.map(day => {\n                            if (this.daysToIrrigate.includes(day.charAt(0).toUpperCase() + day.slice(1))) {\n                                return `\n                                    <label class=\"day day-on\" for=\"${day}\">\n                                    <input type=\"checkbox\" class=\"day-checkbox\" id=\"${day}\" name=\"${day}\" value=\"${day.charAt(0).toUpperCase() + day.slice(1)}\" checked>${day.charAt(0).toUpperCase() + day.slice(1)}</label>\n                                `\n                            } else {\n                                return `\n                                    <label class=\"day day-off\" for=\"${day}\">\n                                    <input type=\"checkbox\" id=\"${day}\" class=\"day-checkbox\" name=\"${day}\" value=\"${day.charAt(0).toUpperCase() + day.slice(1)}\">${day.charAt(0).toUpperCase() + day.slice(1)}</label>\n                                `\n                            }\n                        }).join(\"\") \n                    }\n                </div>\n\n                ${\n                    this.cycleOnTimeArray.map((element, index) => {\n                        return `<div class=\"times-div\"><div class=\"hr-min-sec-time\">\n                            <label for=\"cycleOnTimeHr\" class=\"cycleOnTime\">Cycle On Time Hr:Min:Sec </label>\n                            <input type=\"number\" class=\"cycleOnTimeHr\" name=\"cycleOnTimeHr\" step=\"1\" value=\"${element.substring(11, 13)}\">\n                            <span class=\"colon\">:</span>   \n                            <input type=\"number\" class=\"cycleOnTimeMin\" name=\"cycleOnTimeMin\" step=\"1\" value=\"${element.substring(14, 16)}\">\n                            <span class=\"colon\">:</span>   \n                            <input type=\"number\" class=\"cycleOnTimeSec\" name=\"cycleOnTimeSec\" step=\"1\" value=\"${element.substring(17, 19)}\">\n                        </div>\n\n                        <div class=\"on-times\">\n                            <label for=\"onTime\">On Time(s)</label>\n                            <div>\n                                <input type=\"time\" class=\"onTime\" name=\"onTime\" value=\"${this.startTimesArray[index]}\"><span></span>\n                            </div>\n                        </div>\n                            <button type=\"button\" class=\"delete-btn\">Delete</button>\n                        </div>`\n                    })\n                }\n                <button type=\"button\" id=\"addAnothertime\">Add Another Time</button>\n\n                <button type=\"button\" class=\"form-submit\" id=\"form-submit\">Modify</button>\n                <button type=\"button\" class=\"form-delete\" id=\"form-delete\">Delete</button>\n                <button type=\"button\" class=\"form-cancel\" onclick = \"window.location.href = '/';\">Cancel</button>\n        `;\n\n\n        formElement.innerHTML = form;\n\n        \n        if (event.target.nextSibling == null || event.target.nextSibling.tagName != \"FORM\") {\n            event.target.insertAdjacentElement(\"afterend\", formElement);\n        } else {\n            event.target.parentNode.removeChild(event.target.nextSibling);\n        }\n\n        document.getElementById(\"addAnothertime\").addEventListener(\"click\", (e) => {\n            const addAnotherBtn = document.getElementById(\"addAnothertime\");\n\n            const elementToAddStartTime = `<label for=\"cycleOnTimeHr\" class=\"cycleOnTime\">Cycle On Time Hr:Min:Sec </label>\n                                            <input type=\"number\" class\"cycleOnTimeHr\" name=\"cycleOnTimeHr\" step=\"1\" value=\"\">\n                                            <span class=\"colon\">:</span>   \n                                            <input type=\"number\" class\"cycleOnTimeMin\" name=\"cycleOnTimeMin\" step=\"1\" value=\"\">\n                                            <span class=\"colon\">:</span>   \n                                            <input type=\"number\" class\"cycleOnTimeSec\" name=\"cycleOnTimeSec\" step=\"1\" value=\"\">`;\n            const divToAddForStartTime = document.createElement(\"div\");\n            divToAddForStartTime.className = \"hr-min-sec-time\";\n            divToAddForStartTime.innerHTML = elementToAddStartTime;\n\n            const elementToAddOnTime = `<label for=\"onTime\">On Time(s)</label>\n                                        <div><input type=\"time\" name=\"onTime\"><span></span></div>`;\n            const divToAdd = document.createElement(\"div\");\n            divToAdd.className = \"on-times\";\n            divToAdd.innerHTML = elementToAddOnTime;\n\n            const deleteBtn = document.createElement(\"button\");\n            deleteBtn.className = \"delete-btn\";\n            deleteBtn.type = \"button\";\n            deleteBtn.innerHTML = \"Delete\";\n\n            const timesDiv = document.createElement(\"div\");\n            timesDiv.className = \"times-div\";\n            timesDiv.appendChild(divToAddForStartTime);\n            timesDiv.appendChild(divToAdd);\n            timesDiv.appendChild(deleteBtn);\n\n            e.currentTarget.parentNode.insertBefore(timesDiv,addAnotherBtn);\n        })\n\n        document.getElementById(\"deviceForm\").addEventListener(\"click\", (e) => {\n            if (e.target.className === \"delete-btn\") {\n                e.target.parentNode.parentNode.removeChild(e.target.parentNode);\n            }\n        })\n        \n        document.getElementById(\"form-submit\").addEventListener(\"click\", () => {\n            console.log(\"form submit click\");\n            let data = {\n                id : this.id,\n                pin : _device_js__WEBPACK_IMPORTED_MODULE_0__[\"Device\"].pinsConvertForPi(document.getElementById(\"pin\").value),\n                name : document.getElementById(\"name\").value,\n                notes : document.getElementById(\"notes\").value,\n                cycleOnTimeHr : Array.from(document.getElementsByClassName(\"cycleOnTimeHr\")).map(element => element.value),\n                cycleOnTimeMin : Array.from(document.getElementsByClassName(\"cycleOnTimeMin\")).map(element => element.value),\n                cycleOnTimeSec : Array.from(document.getElementsByClassName(\"cycleOnTimeSec\")).map(element => element.value),\n                onTime : Array.from(document.getElementsByClassName(\"onTime\")).map(element => element.value),\n                monday : document.getElementById(\"monday\").checked,\n                tuesday : document.getElementById(\"tuesday\").checked,\n                wendesday : document.getElementById(\"wendesday\").checked,\n                thursday : document.getElementById(\"thursday\").checked,\n                friday : document.getElementById(\"friday\").checked,\n                saturday : document.getElementById(\"saturday\").checked,\n                sunday : document.getElementById(\"sunday\").checked\n            }\n            console.log(data);\n            fetch(\"/irrigation\", {\n                method : \"PUT\",\n                headers : {\n                    'Content-Type': 'application/json',\n                },\n                body : JSON.stringify(data),\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200)\n                    console.log(\"success\");\n                    //TODO:\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        })\n\n        document.getElementById(\"form-delete\").addEventListener(\"click\", () => {\n            let data = {\n                id : this.id\n            }\n            fetch(\"/irrigation\", {\n                method : \"DELETE\",\n                headers : {\n                    'Content-Type': 'application/json',\n                },\n                body : JSON.stringify(data),\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status == 200)\n                    console.log(\"success\");\n                    //TODO:\n            })\n            .catch(error => {\n                console.log(error);\n            })\n        })\n\n        document.querySelector(\".daysToIrrigate\").addEventListener(\"click\", (e) => {\n            console.log(e.target);\n            if (e.target.nextSibling.checked === true) {\n                e.target.nextSibling.checked = false;\n            } else {\n                e.target.nextSibling.checked = true;\n            }\n            e.target.classList.toggle(\"day-off\");\n            e.target.classList.toggle(\"day-on\");\n        })\n    }\n};\n\n//# sourceURL=webpack:///./src/public/js/irrigation-device.js?");

/***/ }),

/***/ "./src/public/js/main.js":
/*!*******************************!*\
  !*** ./src/public/js/main.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cycle_irrigation_device_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cycle-irrigation-device.js */ \"./src/public/js/cycle-irrigation-device.js\");\n/* harmony import */ var _irrigation_device_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./irrigation-device.js */ \"./src/public/js/irrigation-device.js\");\n/* harmony import */ var _device_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./device.js */ \"./src/public/js/device.js\");\n\n\n\n\nlet arrDevices = []\n\n\n// build the buttons on main page from db\nwindow.onload = () => {\n    //if (document.getElementById(\"main-area\") !== null) {\n    function getIrrigationDevices() {\n        return fetch(\"/api/irrigationDevices\", {method: \"GET\"})\n            .then(res => res.json())\n            .then(data => {\n                data.forEach(function(item) {\n                    arrDevices.push(new _irrigation_device_js__WEBPACK_IMPORTED_MODULE_1__[\"IrrigationDevice\"](\n                        item.id,item.name,item.pin,item.notes, item.state, item.cycleOnTimeArray, item.startTimesArray, item.daysToIrrigate)\n                    )\n                })\n            })\n    }\n    function getCycleIrrigationDevices() {\n        return fetch(\"/api/cycleIrrigationDevices\", {method: \"GET\"})\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                data.forEach(function(item) {\n                    arrDevices.push(new _cycle_irrigation_device_js__WEBPACK_IMPORTED_MODULE_0__[\"CycleIrrigationDevice\"](\n                        item.id, item.name, item.pin, item.notes, item.state, item.cycleOnTimeHr, item.cycleOnTimeMin, \n                        item.cycleOnTimeSec, item.cycleOffTimeHr, item.cycleOffTimeMin, item.cycleOffTimeSec, \n                        item.blackoutStartTime, item.blackoutStopTime\n                    ))\n                })\n            })\n    }\n\n        const addDeviceBtn = document.getElementById(\"drop-btn\");\n        const dropdownContent = document.getElementById(\"dropdown-content\");\n        if (addDeviceBtn !== null) {\n            addDeviceBtn.addEventListener(\"click\", () => {\n                if (dropdownContent.classList.contains(\"show\")) {\n                    dropdownContent.classList.remove(\"show\");\n                    dropdownContent.classList.add(\"noshow\");\n                } else {\n                    dropdownContent.classList.add(\"show\");\n                    dropdownContent.classList.remove(\"noshow\");\n                }\n            })\n        }\n    //}\n    function getAllApis(){\n        return Promise.all([getCycleIrrigationDevices(), getIrrigationDevices()]);\n    }\n\n    getAllApis()\n        .then(() => {\n            const selectDiv = document.querySelector(\".pin-numbers\");\n            let options = \"<select name='pin' id='pin'>\";\n            if (selectDiv !== null && selectDiv !== undefined) {\n                console.log(_device_js__WEBPACK_IMPORTED_MODULE_2__[\"Device\"].pinsUsed);\n                for (let i = 1; i < 11; i += 1) {\n                    if (_device_js__WEBPACK_IMPORTED_MODULE_2__[\"Device\"].pinsUsed.includes(i)) {\n                        options += `<option disabled>${i}</option>`\n                    } else {\n                        options += `<option>${i}</option>`\n                    }\n                }\n                options += \"</select>\"\n                selectDiv.innerHTML = options;\n            }\n        })\n}\n\n\n\n//# sourceURL=webpack:///./src/public/js/main.js?");

/***/ })

/******/ });